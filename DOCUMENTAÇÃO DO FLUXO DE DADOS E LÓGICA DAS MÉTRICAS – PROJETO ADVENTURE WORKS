â®•â€¯1. VisÃ£o Geral
Este projeto foi desenvolvido como um portfÃ³lio para demonstrar habilidades com SQL, SSIS e Power BI. A fonte de dados utilizada foi o banco pÃºblico AdventureWorks, com foco na anÃ¡lise de vendas.

O objetivo foi construir uma arquitetura de Business Intelligence com:

ExtraÃ§Ã£o, transformaÃ§Ã£o e carga (ETL) com SSIS

ConstruÃ§Ã£o de um Data Warehouse (DW) relacional com modelagem em estrela

CriaÃ§Ã£o de dashboards analÃ­ticos em Power BI

â®•â€¯2. Arquitetura de Dados

Fonte de Dados: Banco OLTP AdventureWorks (tabelas como Sales.SalesOrderHeader, Sales.SalesOrderDetail, Production.Product etc.)

Processo ETL com SSIS:

ExtraÃ§Ã£o das tabelas principais

Tratamento e transformaÃ§Ã£o dos dados

CriaÃ§Ã£o das tabelas fato e dimensÃµes no Data Warehouse (DW)

Modelagem Dimensional:

Tabela fato: DW.FactSales

DimensÃµes: DW.DimDate, DW.DimCustomer, DW.DimProduct, DW.DimSalesTerritory

Camada semÃ¢ntica:

Views criadas em SQL para facilitar o consumo no Power BI

VisualizaÃ§Ã£o no Power BI:

KPIs, grÃ¡ficos comparativos, ranking e anÃ¡lises temporais

â®•â€¯3. Detalhamento do Fluxo de Dados

ðŸ“Œ ETL com SSIS:

Os dados foram extraÃ­dos diretamente do banco AdventureWorks.

Foram realizadas as seguintes transformaÃ§Ãµes:

CÃ¡lculo de GrossProfit (lucro bruto = receita â€“ custo)

ConversÃ£o de formatos de data

JunÃ§Ãµes para enriquecer a tabela fato com atributos das dimensÃµes

Os dados tratados foram carregados em tabelas no schema DW.

ðŸ“Œ Data Warehouse:

DW.FactSales: consolida os fatos de vendas, com medidas como TotalRevenue, TotalCost, GrossProfit, OrderQuantity.

DW.DimDate: tabela de calendÃ¡rio com hierarquia Ano > MÃªs > Dia.

DW.DimCustomer: dados dos clientes.

DW.DimProduct: dados de produto, categoria, subcategoria.

DW.DimSalesTerritory: territÃ³rios de venda.

â®•â€¯4. LÃ³gica das MÃ©tricas e FÃ³rmulas DAX

ðŸ“Œ MÃ©tricas Base:

Total Revenue:

DAX
Copiar
Editar
Total Revenue = SUM(FactSales[TotalRevenue])
Total Cost:

DAX
Copiar
Editar
Total Cost = SUM(FactSales[TotalCost])
Gross Profit:

DAX
Copiar
Editar
Gross Profit = SUM(FactSales[GrossProfit])
Total Orders:

DAX
Copiar
Editar
Total Orders = COUNT(FactSales[SalesKey])
ðŸ“Œ MÃ©tricas de AnÃ¡lise:

MÃ©dia de Receita por Estado:

DAX
Copiar
Editar
Avg Revenue by State = AVERAGEX(VALUES(DimCustomer[StateProvince]), [Total Revenue])
Ticket MÃ©dio (por pedido):

DAX
Copiar
Editar
Avg Ticket = [Total Revenue] / [Total Orders]
YoY Gross Profit:

DAX
Copiar
Editar
YoY Gross Profit = 
VAR CurrentYear = YEAR(MAX(DimDate[FullDate]))
VAR LastYearGrossProfit = 
    CALCULATE([Gross Profit], SAMEPERIODLASTYEAR(DimDate[FullDate]))
RETURN
    DIVIDE([Gross Profit] - LastYearGrossProfit, LastYearGrossProfit)
ðŸ“Œ Filtros aplicados:

Filtros de Data para grÃ¡ficos comparativos

Filtros Top N (Top 10 Estados) com medida Total Revenue

Slicers para seleÃ§Ã£o de Ano e MÃªs

â®•â€¯5. Layout e Paleta Visual (Power BI)

PÃ¡gina 1:

Indicadores de performance (Gross Profit, Total Revenue, Total Orders)

GrÃ¡ficos de barras com evoluÃ§Ã£o mensal

YoY com cor dinÃ¢mica

PÃ¡gina 2:

Top 10 estados por vendas

MÃ©dia de receita por estado

Ticket mÃ©dio

KPI extra: total de pedidos por estado

Paleta de Cores:

PrimÃ¡rio: Azul (#004785)

SecundÃ¡rio: Laranja (#f29f05)

Neutro claro: Cinza claro (#e6e6e6)

Neutro escuro: Grafite (#333333)

Fundo branco ou cinza muito claro (#fafafa)

â®•â€¯6. ConclusÃ£o

Este projeto mostra a integraÃ§Ã£o entre SQL, SSIS e Power BI em um ciclo completo de BI: desde o tratamento de dados, estruturaÃ§Ã£o de um DW, atÃ© a entrega de insights visuais claros e eficazes. O uso de views otimizadas e fÃ³rmulas DAX permite uma anÃ¡lise Ã¡gil e interativa dos dados de vendas.
